import random
import pygame
pygame.init()

display_width = 660
display_height = 660

gameDisplay = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption("Monopoly")

whiteBoard = (255,255,255)
white = (200,200,200)
black = (0,0,0)
red = (255,0,0)
green = (0,255,0)
blue = (0,0,255)
yellow = (255,255,0)
playerColours = [red,blue,green,yellow,white,black]
propertyColours = [(200,0,0),(0,100,200),(0,200,0),(230,200,0),(150,150,150),(100,100,100)]

font = pygame.font.SysFont(None,20)

## all constants and display settings before this point
##############################################################################################################################

#### INTRODUCTION to explain what terms mean

## currentPlayerIndex is the identity of the player whose turn it currently is. This is a value between 0 and numberOfPlayers-1 (inclusive).

## currentPosition is the position of the current player's piece on the board. This is a value between 0 and 39 (inclusive).

## jailIndex is a list with element jailIndex[playeri] being the number of turns for which playeri has been in jail (0 if not in jail).

## playerCash is a list with element playerCash[playeri] being the cash belonging to playeri.

## startPosition is the position in which the current player started the roll - this helps to check whether the player passed Go.

## properties is a list with 40-element indexed by the spaces on the board. The element properties[boardSpacei] is determined by the type of space:
## for all boardSpacei in range(0,40):
##     properties[boardSpacei][0] is the type of square: "space", "card", "tax", "property", "utility", "station"
##     properties[boardSpacei][1] is the name of the square, e.g. "Old Kent Road", "Chance", "Water Works", "Jail"
##     if properties[boardSpacei][0] == "property":
##         properties[boardSpacei][2] = bool(owned)
##         properties[boardSpacei][3] = owner identity number (if owned, else any player number)
##         properties[boardSpacei][4] = cost of property
##         properties[boardSpacei][5] = bool(mortgaged)
##         properties[boardSpacei][6] = list of rent values [0house, 1house, 2house, 3house, 4house, 5house (hotel)]
##         properties[boardSpacei][7] = number of houses
##     if properties[boardSpacei][0] == "utility" or "station":
##         properties[boardSpacei][2] = bool(owned)
##         properties[boardSpacei][3] = owner identity number (if owned, else any player number)
##         properties[boardSpacei][4] = cost of property
##         properties[boardSpacei][5] = bool(mortgaged)
##     if properties[boardSpacei][0] == "tax":
##         properties[boardSpacei][2] = tax cost
##     if properties[boardSpacei][0] == "space" or "card" then there is no additional elements to this list.

## diceRoll is the total rolled by the player, used for rent if the player landed on one of the utilities.

## communityChestDeck and chanceDeck consist of numbers in the range 0 to 15 inclusive which index community chest and chance cards yet unused.

#####################################################################################################################################

#### FUNCTIONS for logical gameplay

## diceRoll function for rolling dice and moving the piece the required distance. This includes dealing with whether the player begins in jail.
def diceRoll(currentPlayerIndex,currentPosition,jailIndex,playerCash):
	# roll two dice
    dice1 = random.choice([1,2,3,4,5,6])
    dice2 = random.choice([1,2,3,4,5,6])
	# take their total
    diceRoll = dice1 + dice2
	# if not in jail, move that far
    if jailIndex[currentPlayerIndex] == 0:
        currentPosition += diceRoll
        currentPosition = currentPosition%40
	# elif in jail for one or two turns
    elif jailIndex[currentPlayerIndex] in [1,2]:
		# if rolled doubles, move that far and freed from jail
        if dice1 == dice2:
            currentPosition += diceRoll
            currentPosition = currentPosition%40
            jailIndex[currentPlayerIndex] = 0
		# otherwise, stay in jail, and register the extra turn in jail
        else:
            jailIndex[currentPlayerIndex] += 1
            print("Player ",currentPlayerIndex," stayed in jail")
	# elif in jail for three turns
    elif jailIndex[currentPlayerIndex] == 3:
		# if rolled doubles, move that far
        if dice1 == dice2:
            currentPosition += diceRoll
            currentPosition = currentPosition%40
		# otherwise, pay to get out and move that far
        else:
            playerCash[currentPlayerIndex] -= 50
            currentPosition += diceRoll
            currentPosition = currentPosition%40
            print("Player ",currentPlayerIndex," paid 50 coins to gets out of jail")
		# either way, freed from jail
        jailIndex[currentPlayerIndex] = 0
	# save dice roll as appropriate name
	dice = diceRoll
    return currentPosition, jailIndex, playerCash, dice

## goToJail function to test whether player lands on space 30 ("Go To Jail"), and result if so
def goToJail(currentPlayerIndex,currentPosition,jailIndex):
	# if player lands on "Go To Jail"
    if currentPosition == 30:
		# go to space 10 ("Jail")
        print("Go To Jail")
        currentPosition = 10
		# imprison
        jailIndex[currentPlayerIndex] = 1
    return currentPosition, jailIndex

## go function to test whether player lands on or passes space 0 ("Go"), and result if so
def go(playerCash,currentPlayerIndex,currentPosition,startPosition):
	# if player's position after rolling is a lower index than that of the starting position
    if currentPosition < startPosition:
		# player given 200 coins
        playerCash[currentPlayerIndex] += 200
        print("Player ",currentPlayerIndex," passed Go and recieved 200 coins")
    return playerCash

## rent function to calculate if rent is owed, how much is owed, and then make payment / deal with bankruptcy
def rent(currentPosition,currentPlayerIndex,playerCash,properties,diceRoll):
	# rent is paid on these property types
    if properties[currentPosition][0] in ["property","utility","station"]:
		# rent is paid if the property is owned
        if properties[currentPosition][2] == True:
			# calculate the amount of rent
            rentValue = 0
			playerOwed = properties[currentPosition][3]
			# rent only if a different owner, and property not mortgaged
			if playerOwed != currentPlayerIndex and properties[currentPosition][5] == False:
				# rent value for property is based on the number of houses on this property
            	if properties[currentPosition][0] == "property":
                	rentValue = properties[currentPosition][6][properties[currentPosition][7]]
				# rent value for utility is based on whether other utility is owned by the same player
            	elif properties[currentPosition][0] == "utility":
                	if currentPosition == 12:
                    	if properties[28][2] == True and properties[28][3] == playerOwed:
                        	rentValue = 10*diceRoll
                    	else:
                        	rentValue = 4*diceRoll
                	else: # currentPosition == 28
                    	if properties[12][2] == True and properties[12][3] == playerOwed:
                        	rentValue = 10*diceRoll
                    	else:
                        	rentValue = 4*diceRoll
				# rent value for station is based on how many other stations are owned by the same player
            	else: # properties[currentPosition][0] == "station"
                	numberOfStations = -1
                	for index in range(0,4):
                	    if properties[10*index + 5][2] == True and properties[10*index + 5][3] == playerOwed:
                    	    numberOfStations += 1
					# factoring the station in current position, numberOfStations = 0. Then any extra stations will give a positive contribution
                	rentValue = 25*(2**numberOfStations)
			if rentValue != 0:
				# if the player can afford the rent, he/she will pay the rent
            	if playerCash[currentPlayerIndex] >= rentValue:
                    playerCash[currentPlayerIndex] -= rentValue
                    playerCash[playerOwed] += rentValue
                    print("Player ",currentPlayerIndex, " paid ",rentValue," coins to player ",playerOwed," in rent")
				# otherwise, the player goes bankrupt, and all remaining money and property goes to the player owed
                else:
                    print("PLAYER",currentPlayerIndex, " IS BANKRUPT!")
                    print("Player ",playerOwed, " received the remaining money and properties")
					# cash is transferred
                    playerCash[playerOwed] += playerCash[currentPlayerIndex]
                    playerCash[currentPlayerIndex] = -1
                    for Property in properties:
                        if Property[0] in ["property","utility","station"]:
							# if player owns this property, then it goes to the player owed
                            if Property[2] == True and Property[3] == currentPlayerIndex:
                                Property[3] = playerOwed
    return playerCash,properties

# purchase function purchases property if it is currently unowned
def purchase(currentPosition,currentPlayerIndex,playerCash,properties):
    if properties[currentPosition][0] in ["property","station","utility"]:
		# if it is unowned
        if properties[currentPosition][2] == False:
            cost = properties[currentPosition][4]
			# if the player can afford it, then the player buys it
            if playerCash[currentPlayerIndex] >= cost:
                playerCash[currentPlayerIndex] -= cost
                properties[currentPosition][2] = True
                properties[currentPosition][3] = currentPlayerIndex
                print("Player ",currentPlayerIndex," bought ",properties[currentPosition][1]," for ",cost," coins")
    return playerCash, properties

# tax function to calculate whether tax is owed, how much tax is owed, and whether the player can afford it or goes bankrupt as a result
def tax(currentPosition,currentPlayerIndex,playerCash,properties):
    if properties[currentPosition][0] == "tax":
        cost = properties[currentPosition][2]
        if playerCash[currentPlayerIndex] >= cost:
            playerCash[currentPlayerIndex] -= cost
            print("Player ",currentPlayerIndex, " has paid ",cost," coins to the bank in tax")
        else:
            print("PLAYER ",currentPlayerIndex, " IS BANKRUPT!")
            print("The bank received all cash and properties owned by player ",currentPlayerIndex)
            playerCash[currentPlayerIndex] = -1
            for Property in properties:
                if Property[0] in ["property","utility","station"] and Property[2] == True and Property[3] == currentPlayerIndex:
                    Property[2] = False
    return playerCash, properties

##def house(playerPositions,currentPlayerIndex,playerCash,properties):
##    return playerCash, properties

def communityChest(currentPlayerIndex,currentPosition,playerCash,properties,communityChestDeck):
    if properties[currentPosition][0] == "card":
        if properties[currentPosition][1] == "Community Chest":
            cardNumber = random.choice(communityChestDeck)
            print("Player ",currentPlayerIndex," picked up a community chest")
            if cardNumber == 0:
                print("Advance to Go")
                currentPosition = 0
                playerCash[currentPlayerIndex] += 200
                print("Player ",currentPlayerIndex," passed Go and recieved 200 coins")
            elif cardNumber == 1:
                print("Go back to Old Kent Road")
                currentPosition = 1
            elif cardNumber == 2:
                print("Go to Jail. Move directly to jail. Do not pass Go. Do not collect 200 coins")
                currentPosition = 30
            elif cardNumber in [3,4,5]:
                if cardNumber == 3:
                    print("Pay hospital 100 coins")
                    cashOwed = 100
                elif cardNumber == 4:
                    print("Doctor's fee. Pay 50 coins")
                    cashOwed = 50
                else:
                    print("Pay your insurance premium. 50 coins")
                    cashOwed = 50
                if playerCash[currentPlayerIndex] >= cashOwed:
                    playerCash[currentPlayerIndex] -= cashOwed
                    print("Player ",currentPlayerIndex, " has paid ",cashOwed," coins to the bank")
                else:
                    print("PLAYER ",currentPlayerIndex, " IS BANKRUPT!")
                    print("The bank received all cash and properties owned by player ",currentPlayerIndex)
                    playerCash[currentPlayerIndex] = -1
                    for Property in properties:
                        if Property[0] in ["property","utility","station"] and Property[2] == True and Property[3] == currentPlayerIndex:
                            Property[2] = False
            elif cardNumber == 6:
                print("Bank error in your favour. Collect 200 coins")
                playerCash[currentPlayerIndex] += 200
            elif cardNumber == 7:
                print("Annuity matures. Collect 100 coins")
                playerCash[currentPlayerIndex] += 100
            elif cardNumber == 8:
                print("You inherit 100 coins")
                playerCash[currentPlayerIndex] += 100
            elif cardNumber == 9:
                print("From sale of stock you get 50 coins")
                playerCash[currentPlayerIndex] += 50
            elif cardNumber == 10:
                print("Receive interest on 7% preference shares: 25 coins")
                playerCash[currentPlayerIndex] += 25
            elif cardNumber == 11:
                print("Income tax refund. Collect 20 coins")
                playerCash[currentPlayerIndex] += 20
            elif cardNumber == 12:
                print("You have won second prize in a beauty contest. Collect 10 coins")
                playerCash[currentPlayerIndex] += 10
            elif cardNumber == 13:
                print("It is your birthday. Collect 10 coins from each player")
##                playerCash[currentPlayerIndex] += 10
            elif cardNumber == 14:
                print("Get out of jail free. This card may be kept until needed or sold")
            else:
                print("Take a Chance")
##                
            communityChestDeck.remove(cardNumber)
            if communityChestDeck == []:
                for i in range(0,16):
                    communityChestDeck.append(i)
    return currentPosition, playerCash, properties, communityChestDeck

def chance(currentPlayerIndex,currentPosition,playerCash,properties,chanceDeck,startPosition):
    if properties[currentPosition][0] == "card":
        if properties[currentPosition][1] == "Chance":
            cardNumber = random.choice(chanceDeck)
            print("Player ",currentPlayerIndex," picked up a chance")
            if cardNumber in [0,1,2,3,4,5]:
                if cardNumber == 0:
                    print("Advance to Go")
                    currentPosition = 0
                elif cardNumber == 1:
                    print("Go back three spaces")
                    currentPosition -= 3
                elif cardNumber == 2:
                    print("Advance to Pall Mall. If you pass Go, collect 200 coins")
                    currentPosition = 11
                elif cardNumber == 3:
                    print("Take a trip to MaryleboneStation. If you pass Go, collect 200 coins")
                    currentPosition = 15
                elif cardNumber == 4:
                    print("Advance to Trafalgar Square. If you pass Go, collect 200 coins")
                    currentPosition = 24
                elif cardNumber == 5:
                    print("Advance to Mayfair")
                    currentPosition = 39
                playerCash = go(playerCash,currentPlayerIndex,currentPosition,startPosition)
            elif cardNumber == 6:
                print("Go to Jail. Move directly to jail. Do not pass Go. Do not collect 200 coins")
                currentPosition = 30        
            elif cardNumber in [7,8,9,10,11]:
                if cardNumber in [7,8]:
                    houses = 0
                    hotels = 0
                    for Property in properties:
                        if Property[0] == "property":
                            if Property[2] == True:
                                if Property[3] == currentPlayerIndex:
                                    if Property[7] in [1,2,3,4]:
                                        houses += Property7
                                    elif Property[7] == 5:
                                        hotels += 1
                    if cardNumber == 7:
                        print("Make general repairs on all of your houses. For each house pay 25 coins. For each hotel pay 100 coins")
                        cashOwed = 25*houses + 100*hotels
                    else:
                        print("You are assessed for street repairs: 40 coins per house, 115 coins per hotel")
                        cashOwed = 40*houses + 115*hotels
                elif cardNumber == 9:
                    print("Pay school fees of 150 coins")
                    cashOwed = 150
                elif cardNumber == 10:
                    print("Drink driving fine of 20 coins")
                    cashOwed = 20
                else:
                    print("Speeding fine of 15 coins")
                    cashOwed = 15
                if playerCash[currentPlayerIndex] >= cashOwed:
                    playerCash[currentPlayerIndex] -= cashOwed
                    print("Player ",currentPlayerIndex, " has paid ",cashOwed," coins to the bank")
                else:
                    print("PLAYER ",currentPlayerIndex, " IS BANKRUPT!")
                    print("The bank received all cash and properties owned by player ",currentPlayerIndex)
                    playerCash[currentPlayerIndex] = -1
                    for Property in properties:
                        if Property[0] in ["property","utility","station"] and Property[2] == True and Property[3] == currentPlayerIndex:
                            Property[2] = False
            elif cardNumber == 12:
                print("Your building loan matures. Recieve 150 coins")
                playerCash[currentPlayerIndex] += 150
            elif cardNumber == 13:
                print("You have won a crossword competition. Collect 100 coins")
                playerCash[currentPlayerIndex] += 100
            elif cardNumber == 14:
                print("Bank pays you dividend of 50 coins")
                playerCash[currentPlayerIndex] += 50
            else:
                print("Get out of jail free. This card may be kept until needed or sold")
            chanceDeck.remove(cardNumber)
            if chanceDeck == []:
                for i in range(0,16):
                    chanceDeck.append(i)
    return currentPosition, playerCash, properties, chanceDeck

def propertyHighlight(properties):
    propertiesOwned = []
    for index in range(0,40):
        Property = properties[index]
        if Property[0] in ["property","station","utility"]:
            if Property[2] == True:
                propertiesOwned.append([index,Property[3]])
    for Property in propertiesOwned:
        if Property[0] in range(0,10):
            squarePosition = (Property[0]*60,0)
        elif Property[0] in range(10,20):
            squarePosition = (600,(Property[0]-10)*60)
        elif Property[0] in range(20,30):
            squarePosition = ((30-Property[0])*60,600)
        else:
            squarePosition = (0, (40-Property[0])*60)
        propertyColour = propertyColours[Property[1]]
        pygame.draw.rect(gameDisplay,propertyColour,[squarePosition[0]+1,squarePosition[1]+1,60,60])
        
def playerIconPaste(playerIndex,playerPosition):
    counterPosition = [(5,10),(25,10),(45,10),(5,30),(25,30),(45,30)][playerIndex]
    if playerPosition in range(0,10):
        squarePosition = (playerPosition*60,0)
    elif playerPosition in range(10,20):
        squarePosition = (600,(playerPosition-10)*60)
    elif playerPosition in range(20,30):
        squarePosition = ((30-playerPosition)*60,600)
    else:
        squarePosition = (0, (40-playerPosition)*60)
    position = (counterPosition[0]+squarePosition[0],
                counterPosition[1]+squarePosition[1])
    pygame.draw.rect(gameDisplay,playerColours[playerIndex],[position[0],position[1],10,10])

def printProperties(properties):
    propertiesOwned = []
    propertiesUnowned = []
    for index in range(0,40):
        Property = properties[index]
        if Property[0] in ["property","station","utility"]:
            if Property[2] == True:
                propertiesOwned.append([Property[1],Property[3]])
            else:
                propertiesUnowned.append(Property[1])
    print(propertiesOwned)
    print(propertiesUnowned)
                
def gameLoop(numberOfPlayers):
    gameExit = False
    playerPositions = []
    playerCash = []
    jailIndex = []
    currentPlayerIndex = 0
    for i in range(0,numberOfPlayers):
        playerPositions.append(0)
        playerCash.append(1500)
        jailIndex.append(0)
##    properties = ["type","name",owned,owner,cost,mort?,[0hs,1hs,2hs,3hs,4hs,hotel],noOfHouse]
    properties = [["space","Go"],
                  ["property","Old Kent Road",False,0,60,False,[2,10,30,90,160,250],0],
                  ["card","Community Chest"],
                  ["property","Whitechapel Road",False,0,60,False,[4,20,60,180,320,450],0],
                  ["tax","Income Tax",200],
                  ["station","King's Cross Station",False,0,200,False],
                  ["property","The Angel, Islington",False,0,100,False,[6,30,90,270,400,550],0],
                  ["card","Chance"],
                  ["property","Euston Road",False,0,100,False,[6,30,90,270,400,550],0],
                  ["property","Pentonville Road",False,0,120,False,[8,40,100,300,450,600],0],
                  ["space","Jail"],
                  ["property","Pall Mall",False,0,140,False,[10,50,150,450,625,750],0],
                  ["utility","Electric Company",False,0,150,False],
                  ["property","Whitehall",False,0,140,False,[10,50,150,450,625,750],0],
                  ["property","Northumberland Avenue",False,0,160,False,[12,60,180,500,700,900],0],
                  ["station","Marylebone Station",False,0,200,False],
                  ["property","Bow Street",False,0,180,False,[14,70,200,550,750,950],0],
                  ["card","Community Chest"],
                  ["property","Marlborough Street",False,0,180,False,[14,70,200,550,750,950],0],
                  ["property","Vine Street",False,0,200,False,[16,80,220,600,800,1000],0],
                  ["space","Free Parking"],
                  ["property","The Strand",False,0,220,False,[18,90,250,700,875,1050],0],
                  ["card","Chance"],
                  ["property","Fleet Street",False,0,220,False,[18,90,250,700,875,1050],0],
                  ["property","Trafalgar Square",False,0,240,False,[20,100,300,750,925,1100],0],
                  ["station","Fenchurch Street Station",False,0,200,False],
                  ["property","Leicester Square",False,0,260,False,[22,110,330,800,975,1150],0],
                  ["property","Coventry Street",False,0,260,False,[22,110,330,800,975,1150],0],
                  ["utility","Water Works",False,0,150,False],
                  ["property","Piccadilly",False,0,280,False,[22,120,360,850,1025,1200],0],
                  ["space","Go To Jail"],
                  ["property","Regent Street",False,0,300,False,[26,130,390,900,1100,1275],0],
                  ["property","Oxford Street",False,0,300,False,[26,130,390,900,1100,1275],0],
                  ["card","Community Chest"],
                  ["property","Bond Street",False,0,320,False,[28,150,450,1000,1200,1400],0],
                  ["station","Liverpool Street Station",False,0,200,False],
                  ["card","Chance"],
                  ["property","Park Lane",False,0,350,False,[35,175,500,1100,1300,1500],0],
                  ["tax","Super Tax",100],
                  ["property","Mayfair",False,0,400,False,[50,200,600,1400,1700,2000],0]]
    communityChestDeck = []
    chanceDeck = []
    for i in range(0,16):
        communityChestDeck.append(i)
        chanceDeck.append(i)
    while not gameExit:
        playersRemaining = numberOfPlayers
        for playerMoney in playerCash:
            if playerMoney == -1:
                playersRemaining -= 1
        if playersRemaining == 1:
            print("Winner!")
            while not gameExit:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        quit()
        if playerCash[currentPlayerIndex] != -1:
            currentPosition = playerPositions[currentPlayerIndex]
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
##                        print("Player ",currentPlayerIndex," starts at ",playerPositions[currentPlayerIndex])
                        (currentPosition,jailIndex,playerCash,dice) = diceRoll(currentPlayerIndex,currentPosition,jailIndex,playerCash)
                        playerCash = go(playerCash,currentPlayerIndex,currentPosition,playerPositions[currentPlayerIndex])
                        (currentPosition,playerCash,properties,communityChestDeck) = communityChest(currentPlayerIndex,currentPosition,playerCash,properties,communityChestDeck)
                        chanceCommunityChestParameter = 0
                        if currentPosition == 36:
                            chanceCommunityChestParameter += 1
                        (currentPosition,playerCash,properties,chanceDeck) = chance(currentPlayerIndex,currentPosition,playerCash,properties,chanceDeck,playerPositions[currentPlayerIndex])
                        if currentPosition == 33 and chanceCommunityChestParameter == 1:
                            (currentPosition,playerCash,properties,communityChestDeck) = communityChest(currentPlayerIndex,currentPosition,playerCash,properties,communityChestDeck)
                        (currentPosition,jailIndex) = goToJail(currentPlayerIndex,currentPosition,jailIndex)
                        print("Player ",currentPlayerIndex," landed on ",properties[currentPosition][1])
                        (playerCash,properties) = rent(currentPosition,currentPlayerIndex,playerCash,properties,dice)
                        (playerCash,properties) = purchase(currentPosition,currentPlayerIndex,playerCash,properties)
                        (playerCash,properties) = tax(currentPosition,currentPlayerIndex,playerCash,properties)
##                        (playerCash,properties) = house(playerPositions,currentPlayerIndex,playerCash,properties)
                        playerPositions[currentPlayerIndex] = currentPosition
                        currentPlayerIndex += 1
                        currentPlayerIndex = currentPlayerIndex%numberOfPlayers
                    elif event.key == pygame.K_c:
                        print(playerCash)
                    elif event.key == pygame.K_p:
                        printProperties(properties)
        else:
            currentPlayerIndex += 1
            currentPlayerIndex = currentPlayerIndex%numberOfPlayers

        gameDisplay.fill(whiteBoard)
        propertyHighlight(properties)
        for i in range(0,11):
            pygame.draw.line(gameDisplay, black, [0,60*i],[660,60*i])
            pygame.draw.line(gameDisplay, black, [60*i,0],[60*i,660])
        pygame.draw.rect(gameDisplay, whiteBoard, [61,61,538,538])
        for playerIndex in range(0,noOfPlayers):
            if playerCash[playerIndex] != -1:
                playerIconPaste(playerIndex,playerPositions[playerIndex])
        pygame.display.update()

noOfPlayers = int(input("Enter number of players: "))
gameLoop(noOfPlayers)
